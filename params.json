{"name":"NoMQ","tagline":"Not a Message Queue (but a simple drop-in event queue)","body":"# NoMQ [![build status](https://secure.travis-ci.org/wassgren/NoMQ.png)](http://travis-ci.org/wassgren/NoMQ)\r\n\r\n__NoMQ__ is short for _Not a Message Queue_. It is a distributed event queue that is based on Java 8 and Hazelcast. NoMQ\r\nrequires __NO__ installation, simply add the jar to your project.\r\n\r\n## Prerequisites\r\n* Java 8\r\n\r\n## Features\r\n * __durability:__ events survive reboots\r\n * __late join:__ new nodes can join later on\r\n * __ordering:__ events are delivered in the same order on all nodes\r\n * __no additional installation required:__ simply include the jars and configure NoMQ from within your Java-code.\r\n\r\n## Getting started\r\nTriggering an event requires a handle to the NoMQ-instance, a payload that is sent to all subscribers and a name of the event\r\nknown as the event type.\r\n\r\nIf you want to subscribe to events in the NoMQ cluster you need to register an _EventSubscriber_. The following code starts a\r\nNoMQ-instance and registers an event subscriber that simply echoes the event id on _System.out_. Events can be published by any\r\nnode in the cluster, they will arrive at all event subscribers in the same order.\r\n\r\n```java\r\nNoMQ noMQ = NoMQBuilder.builder()\r\n    .subscribe(e -> System.out.println(e.id()))\r\n    .build()\r\n    .start();\r\n\r\n// Publish an event asynchronously\r\nnoMQ.publishAsync(\"myEvent\", \"Some payload\".getBytes());\r\n```\r\n\r\nThe payload for an event is always a byte array. This may seem like a strict limitation so if you need to dispatch richer\r\nobjects the solution to this is to use a _Converter_. The code below converts a String to a byte array.\r\n\r\n```java\r\nnoMQ.publishAsync(\"myEvent\", \"Some payload\", str -> str.getBytes());\r\n```\r\n\r\nSubscription of events is done via _EventSubscribers_. Subscribers are registered during setup and simply implements the method\r\n_onEvent_.\r\n\r\n```java\r\npublic interface EventSubscriber {\r\n    void onEvent(Event event);\r\n}\r\n```\r\n\r\nThe event interface is straightforward, it contains a generated unique id, the event type and the payload provided by the\r\npublisher of the event.\r\n```java\r\npublic interface Event {\r\n    String id();\r\n    String type();\r\n    byte[] payload();\r\n}\r\n```\r\n\r\nIf you want to subscribe to the payload in some other format it is possible to use a _Converter_ for subscriptions as well. The\r\n_PayloadSubscriber_ is used together with a _Converter_.\r\n\r\n```java\r\npublic interface PayloadSubscriber<T> {\r\n    void onPayload(T payload);\r\n}\r\n```\r\n\r\nTo register the _PayloadSubscriber_ and _Converter_ use the following code:\r\n```java\r\n// Register payload subscriber and converter,\r\n// the byte[] is converted to a String\r\nNoMQ noMQ = NoMQBuilder.builder()\r\n    .subscribe(\"myEvent\", str -> System.out.println(str), bytes -> new String(bytes))\r\n    .build()\r\n    .start();\r\n\r\n// Publish using a converter\r\nnoMQ.publishAsync(\"myEvent\", \"A string\", str -> str.getBytes());\r\n```\r\n\r\n## Configuring the cluster\r\nNoMQ is based on Hazelcast - to set up a cluster follow the instructions on the Hazelcast website\r\n(http://hazelcast.org/docs/latest/manual/html-single/hazelcast-documentation.html#network-configuration)\r\n\r\n# Issues and feature requests\r\nNoMQ uses [GitHub Issues](https://github.com/wassgren/NoMQ/issues) for feature requests and issue tracking.\r\n\r\n# License\r\n   Copyright 2014 the original author or authors\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.","google":"UA-50620574-1","note":"Don't delete this file! It's used internally to help with page regeneration."}